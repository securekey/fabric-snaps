# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#############################################################

# Configurations for txn snap
txnsnap:
 loglevel: debug

# Membership list polling interval and tls flag
  membership:
    pollinterval: 3s

# Configurations for the fabric client
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: peerorg1

  logging:
    level: info

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Not used by Go SDK. Others SDKs may use it if using an alternative impl
    # Could be used if SDK would require an object for properties like url, db name, etc.
    path: "/tmp/hfc-kvs"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  BCCSP:
    security:
      enabled: true
      default:
        provider: "PKCS11"
      hashAlgorithm: "SHA2"
      softVerify: true
      ephemeral: false
      level: 256
      pin: "98765432"
      label: "ForFabric"
      library: "/usr/lib/x86_64-linux-gnu/softhsm/libsofthsm2.so"

 logging:
  level: info

 keystore:
  path: "/tmp/msp"

# Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 3s
      queryResponse: 30s
      executeTxResponse: 30s
  eventService:
    timeout:
      connection: 3s
      registrationResponse: 3s
  orderer:
    timeout:
      connection: 3s
      response: 5s

orderers:
  orderer.example.com:
    url: grpcs://orderer.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 15

    tlsCACerts:
      # Certificate location absolute path
      path: "/etc/hyperledger/fabric/tls/orderer-ca-cert.pem"

#
# list of participating organizations in this network
#
organizations:
  peerorg1:
    mspid: Org1MSP

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
    cryptoPath: /etc/hyperledger/msp/peer/

    peers:
      - peer0.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-org1

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      pem: "-----BEGIN PRIVATE KEY----- <etc>"
    signedCert:
      path: "/tmp/somepath/signed-cert.pem"

certificateAuthorities:
  ca-org1:
    url: https://ca_peerOrg1:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: true
    tlsCACerts:
      # Comma-Separated list of paths
        # Comma-Separated list of paths
      path : /etc/hyperledger/fabric-ca/ca/ca_root.pem
      client:
        keyfile: /etc/hyperledger/fabric-ca/client/client_client1-key.pem
        certfile: /etc/hyperledger/fabric-ca/client/client_client1.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org1