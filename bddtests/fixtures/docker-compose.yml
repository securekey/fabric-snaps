#
# Copyright IBM Corp, SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:

  testhttpserver:
    container_name: test01.onetap.ca
    image: ${FABRIC_BASEIMAGE_FIXTURE_IMAGE}:${ARCH}-${FABRIC_BASEIMAGE_FIXTURE_TAG}
    environment:
      - GOPATH=/opt/gopath
    working_dir: /opt/gopath/src/github.com/user/httpservers
    command: go run dummyserver.go
    ports:
      - 8443:8443
    volumes:
      - ./httpserver:/opt/gopath/src/github.com/user/httpservers

  metrics.example.com:
    container_name: metrics.example.com
    image: prom/prometheus
    ports:
      - 9095:9090
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  orderer.example.com:
    container_name: orderer.example.com
    image: ${FABRIC_NEXT_NS}/${FABRIC_ORDERER_FIXTURE_IMAGE}:${ARCH}-${FABRIC_NEXT_IMAGE_TAG}
    environment:
      - FABRIC_LOGGING_SPEC=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/twoorgs.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/tls/orderer/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/tls/orderer/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/tls/orderer/ca.crt]
      - ORDERER_GENERAL_TLS_CLIENTAUTHENABLED=true
      - ORDERER_GENERAL_TLS_CLIENTROOTCAS=[/etc/hyperledger/tls/orderer/ca.crt,/etc/hyperledger/mutual_tls/orderer/client_sdk_go-ca_root.pem]
    ports:
      - 7050:7050
    volumes:
        - ./channel:/etc/hyperledger/configtx
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/etc/hyperledger/msp/orderer
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls:/etc/hyperledger/tls/orderer
        - ./config/mutual_tls/ca:/etc/hyperledger/mutual_tls/orderer
  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: ${FABRIC_NEXT_NS}/${FABRIC_PEER_FIXTURE_IMAGE}:${ARCH}-${FABRIC_NEXT_IMAGE_TAG}
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org1.example.com
      - FABRIC_LOGGING_SPEC=cauthdsl=warn:gossip=warn:grpc=debug:ledger=info:msp=warn:policies=warn:peer.gossip=warn:debug
      ## the following setting redirects chaincode container logs to the peer container logs
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_EVENTS_ADDRESS=peer0.org1.example.com:7053
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_CLIENTCERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_CLIENTKEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_TLS_CLIENTAUTHREQUIRED=true
      - CORE_PEER_BCCSP_PKCS11_LIBRARY=${PKCS11_LIBRARY}
      - CORE_PEER_BCCSP_PKCS11_PIN=${PKCS11_PIN}
      - CORE_PEER_BCCSP_PKCS11_LABEL=${PKCS11_LABEL}
      - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/etc/hyperledger/fabric/tls/ca.crt /etc/hyperledger/mutual_tls/peer/client_sdk_go-ca_root.pem
      # override chaincode images
      - CORE_CHAINCODE_BUILDER=${FABRIC_NEXT_NS}/${FABRIC_BUILDER_FIXTURE_IMAGE}:${ARCH}-${FABRIC_NEXT_IMAGE_TAG}
      - CORE_CHAINCODE_GOLANG_RUNTIME=${FABRIC_GOLANG_RUNTIME_FIXTURE_IMAGE}:${ARCH}-${FABRIC_GOLANG_RUNTIME_FIXTURE_TAG}
      # metrics config
      - CORE_METRICS_PROVIDER=prometheus
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:8080
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fixtures_default
      # CouchDB Settings
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=cdbadmin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=secret
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:5984
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    # TODO remove '/opt/gopath/src/ec-keys/import-ec-keys.sh' once peer HSM has all the keys available
    command: /bin/bash -c '/opt/ec-keys/import-ec-keys.sh && peer node start'
    tty: true
    ports:
      - 7051:7051
      - 7053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./config/fabric/core.yaml:/etc/hyperledger/fabric/core.yaml
        - ../../build/snaps/httpsnap.so:/opt/extsysccs/httpsnap.so
        - ../../build/snaps/transactionsnap.so:/opt/extsysccs/transactionsnap.so
        - ../../build/test/txnsnapinvoker.so:/opt/extsysccs/txnsnapinvoker.so
        - ../../build/snaps/membershipsnap.so:/opt/extsysccs/membership.so
        - ../../build/snaps/configurationscc.so:/opt/extsysccs/configurationscc.so
        - ../../build/test/bootstrapsnap.so:/opt/extsysccs/bootstrapsnap.so
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/msp/peer
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
        # Give Snap the orderer CA
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt:/etc/hyperledger/fabric/tls/orderer-ca-cert.pem
        - ./config/mutual_tls/ca:/etc/hyperledger/mutual_tls/peer
        # TODO: Move cert to ledger and key to HSM
        - ./config/mutual_tls/client:/etc/hyperledger/mutual_tls/client
        # Below directory has all the keys to be imported to HSM for bddtests
        # TODO remove below volume once peer HSM has all the keys available
        - ./channel/import-ec-keys.sh:/opt/ec-keys/import-ec-keys.sh
    depends_on:
      - builder
      - orderer.example.com

  couchdb:
    container_name: couchdb
    image: ${FABRIC_COUCHDB_FIXTURE_IMAGE}:${ARCH}-${FABRIC_BASEIMAGE_FIXTURE_TAG}
    ports:
      - 5984:5984
    environment:
      - DB_URL=http://localhost:5984/member_db
      - COUCHDB_USER=cdbadmin
      - COUCHDB_PASSWORD=secret


 # builder is only here to create a dependency on the image (not used as part of compose)
  builder:
    image: ${FABRIC_NEXT_NS}/${FABRIC_BUILDER_FIXTURE_IMAGE}:${ARCH}-${FABRIC_NEXT_IMAGE_TAG}
