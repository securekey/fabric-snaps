#
# Copyright IBM Corp, SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:

  ca.org1.example.com:
    container_name: ca.org1.example.com
    image: ${FABRIC_CA_FIXTURE_IMAGE}:${ARCH}-${FABRIC_CA_FIXTURE_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org1
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/8791d1363e89515f9afa042b0693a2c704bb8dd95d28f97d3549a2b9e3c4352d_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=false
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./channel/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca_peerOrg1

  ca-client-register:
    container_name: fabric-ca-client
    image: ${FABRIC_CA_FIXTURE_IMAGE}:${ARCH}-${FABRIC_CA_FIXTURE_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    command: /bin/bash -c 'sleep 3; fabric-ca-client enroll --url http://admin:adminpw@ca.org1.example.com:7054; fabric-ca-client register --id.name peer0 --id.secret testing --id.type peer --id.affiliation org1 --url http://ca.org1.example.com:7054'
    depends_on:
      - ca.org1.example.com

  orderer.example.com:
    container_name: orderer.example.com
    image: ${FABRIC_ORDERER_FIXTURE_IMAGE}:${FABRIC_ORDERER_FIXTURE_TAG}
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/twoorgs.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/tls/orderer/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/tls/orderer/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/tls/orderer/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: /bin/bash -c 'orderer'
    ports:
      - 7050:7050
    volumes:
        - ./channel:/etc/hyperledger/configtx
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/etc/hyperledger/msp/orderer
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls:/etc/hyperledger/tls/orderer
  cli:
    container_name: cli
    image:  ${FABRIC_TOOLS_FIXTURE_IMAGE}:${FABRIC_TOOLS_FIXTURE_TAG}
    environment:
      - GOPATH=/opt/gopath
      - FABRIC_CFG_PATH=/etc/hyperledger/fabric
      - CORE_PEER_BCCSP_DEFAULT=SW
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c './config/snaps/txnsnapinvoker/cds.sh'
    volumes:
       - /var/run/:/host/var/run/
       - ./config/extsysccs:/opt/extsysccs
       - ./config/snapsbinary:/opt/snapsbinary
       - ./config/snaps/:/opt/snaps
       - ./snapexample/txnsnapinvoker:/opt/gopath/src/txnsnapinvoker
       - ./peer-cli-config/core.yaml:/etc/hyperledger/fabric/core.yaml
       - ./peer-cli-config/msp:/etc/hyperledger/fabric/msp
       - ../../../fabric-snaps/:/opt/gopath/src/github.com/securekey/fabric-snaps
       - ./config:/opt/gopath/src/github.com/hyperledger/fabric/peer/config/
       - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
    depends_on:
      - builder

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:x86_64-1.1.0-softhsm
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_LOGGING_PEER=debug
      ## the following setting redirects chaincode container logs to the peer container logs
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_EVENTS_ADDRESS=peer0.org1.example.com:7053
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # enable External SCCs
      - CORE_CHAINCODE_SYSTEMEXT_ENABLED=true
      # path of External SCCs to read CodeSpec objects
      - CORE_CHAINCODE_SYSTEMEXT_CDS_PATH=/opt/extsysccs
      # Http Snap
      - CORE_CHAINCODE_SYSTEMEXT_HTTPSNAP_ENABLED=true
      - CORE_CHAINCODE_SYSTEMEXT_HTTPSNAP_EXECENV=SYSTEM_EXT
      - CORE_CHAINCODE_SYSTEMEXT_HTTPSNAP_INVOKABLEEXTERNAL=true
      - CORE_CHAINCODE_SYSTEMEXT_HTTPSNAP_INVOKABLECC2CC=true
      - CORE_CHAINCODE_SYSTEMEXT_HTTPSNAP_CONFIGPATH=/opt/snaps/httpsnap
      # Txn Snap
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAP_ENABLED=true
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAP_EXECENV=SYSTEM_EXT
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAP_INVOKABLEEXTERNAL=true
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAP_INVOKABLECC2CC=true
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAP_CONFIGPATH=/opt/snaps/txnsnap
     # Txn Snap Invoker
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAPINVOKER_ENABLED=true
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAPINVOKER_EXECENV=SYSTEM_EXT
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAPINVOKER_INVOKABLEEXTERNAL=true
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAPINVOKER_INVOKABLECC2CC=true
      - CORE_CHAINCODE_SYSTEMEXT_TXNSNAPINVOKER_CONFIGPATH=/opt/snaps/txnsnapinvoker
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fixtures_default
      # PKCS11 stuff
      - FABRIC_CA_CLIENT_HOME=/etc/hyperledger/fabric-ca-client
      - FABRIC_CA_CLIENT_URL=http://peer0:testing@ca.org1.example.com:7054
      - FABRIC_CA_CLIENT_MSPDIR=/etc/hyperledger/msp/peer
      - FABRIC_CA_CLIENT_CSR_HOSTS=peer0.org1.example.com
      - FABRIC_CA_CLIENT_BCCSP_DEFAULT=PKCS11
      - FABRIC_CA_CLIENT_BCCSP_PKCS11_LIBRARY=${PKCS11_LIBRARY}
      - FABRIC_CA_CLIENT_BCCSP_PKCS11_LABEL=${PKCS11_LABEL}
      - FABRIC_CA_CLIENT_BCCSP_PKCS11_PIN=${PKCS11_PIN}
      - FABRIC_CA_CLIENT_BCCSP_PKCS11_SENSITIVEKEYS=${PKCS11_SENSITIVEKEYS}
      - FABRIC_CA_CLIENT_BCCSP_PKCS11_SOFTWAREVERIFY=${PKCS11_SOFTWAREVERIFY}
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: /bin/bash -c 'sleep 15 ; /usr/local/bin/entrypoint.sh'
    ports:
      - 7051:7051
      - 7053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./config/extsysccs:/opt/extsysccs
        - ./config/snaps/:/opt/snaps
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
        # Give Snap the orderer CA
        - ./channel/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt:/etc/hyperledger/fabric/tls/orderer-ca-cert.pem
        # Tell Snap to use Peer's e-certs
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/keystore/a23272f898441edb0f415f028b3b3b42627d75e150dfbae23543234751814983_sk:/etc/hyperledger/fabric/testcerts/ecert/key.pem
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/signcerts/peer0.org1.example.com-cert.pem:/etc/hyperledger/fabric/testcerts/ecert/cert.pem
        # PKCS11 REALTED
        - ./config/ca-client-pkcs11.yaml:/etc/hyperledger/fabric-ca-client/fabric-ca-client-config.yaml
        - ./config/core-pkcs11.yaml:/etc/hyperledger/fabric/core.yaml
        - ./config/peer-pkcs11-entrypoint.sh:/usr/local/bin/entrypoint.sh
        # MSP - WHEN USING PKCS11 WITH ENTRYPOINT ENROLLMENT, WE ONLY NEED ADMINCERTS AND TLSCACERTS. THE REST GETS GENERATED BY FABRIC-CA-CLIENT
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts:/etc/hyperledger/msp/peer/tlscacerts
        - ./channel/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/admincerts:/etc/hyperledger/msp/peer/admincerts
    depends_on:
      - cli
      - builder
      - orderer.example.com



 # builder is only here to create a dependency on the image (not used as part of compose)
  builder:
    image: ${FABRIC_BUILDER_FIXTURE_IMAGE}:${FABRIC_BUILDER_FIXTURE_TAG}
