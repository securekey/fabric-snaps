/*
Notice: This file has been modified for Hyperledger Fabric SDK Go usage.
Please review third_party pinning scripts and patches for more details.
*/
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/configuration.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AnchorPeers simply represents list of anchor peers which is used in ConfigurationItem
type AnchorPeers struct {
	AnchorPeers []*AnchorPeer `protobuf:"bytes,1,rep,name=anchor_peers,json=anchorPeers" json:"anchor_peers,omitempty"`
}

func (m *AnchorPeers) Reset()                    { *m = AnchorPeers{} }
func (m *AnchorPeers) String() string            { return proto.CompactTextString(m) }
func (*AnchorPeers) ProtoMessage()               {}
func (*AnchorPeers) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AnchorPeers) GetAnchorPeers() []*AnchorPeer {
	if m != nil {
		return m.AnchorPeers
	}
	return nil
}

// AnchorPeer message structure which provides information about anchor peer, it includes host name,
// port number and peer certificate.
type AnchorPeer struct {
	// DNS host name of the anchor peer
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// The port number
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *AnchorPeer) Reset()                    { *m = AnchorPeer{} }
func (m *AnchorPeer) String() string            { return proto.CompactTextString(m) }
func (*AnchorPeer) ProtoMessage()               {}
func (*AnchorPeer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *AnchorPeer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AnchorPeer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// APIResource represents an API resource in the peer whose ACL
// is determined by the policy_ref field
type APIResource struct {
	PolicyRef string `protobuf:"bytes,1,opt,name=policy_ref,json=policyRef" json:"policy_ref,omitempty"`
}

func (m *APIResource) Reset()                    { *m = APIResource{} }
func (m *APIResource) String() string            { return proto.CompactTextString(m) }
func (*APIResource) ProtoMessage()               {}
func (*APIResource) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *APIResource) GetPolicyRef() string {
	if m != nil {
		return m.PolicyRef
	}
	return ""
}

// ACLs provides mappings for resources in a channel. APIResource encpasulates
// reference to a policy used to determine ACL for the resource
type ACLs struct {
	Acls map[string]*APIResource `protobuf:"bytes,1,rep,name=acls" json:"acls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ACLs) Reset()                    { *m = ACLs{} }
func (m *ACLs) String() string            { return proto.CompactTextString(m) }
func (*ACLs) ProtoMessage()               {}
func (*ACLs) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ACLs) GetAcls() map[string]*APIResource {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*AnchorPeers)(nil), "sdk.protos.AnchorPeers")
	proto.RegisterType((*AnchorPeer)(nil), "sdk.protos.AnchorPeer")
	proto.RegisterType((*APIResource)(nil), "sdk.protos.APIResource")
	proto.RegisterType((*ACLs)(nil), "sdk.protos.ACLs")
}

func init() { proto.RegisterFile("peer/configuration.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xdf, 0x4b, 0xfb, 0x30,
	0x14, 0xc5, 0xe9, 0x7e, 0x7c, 0x61, 0xb7, 0xdf, 0x07, 0x89, 0x20, 0x45, 0x10, 0x46, 0x9f, 0x36,
	0x91, 0x14, 0xa6, 0x82, 0xf8, 0x56, 0xa7, 0x0f, 0xc2, 0xc0, 0x91, 0x47, 0x5f, 0x46, 0x16, 0x6f,
	0x7f, 0x60, 0x6d, 0xca, 0x4d, 0x2a, 0xf4, 0xcd, 0x3f, 0x5d, 0x9a, 0x6c, 0xab, 0x4f, 0x39, 0x39,
	0xf9, 0x9c, 0xcb, 0x21, 0x17, 0xa2, 0x06, 0x91, 0x12, 0xa5, 0xeb, 0xac, 0xcc, 0x5b, 0x92, 0xb6,
	0xd4, 0x35, 0x6f, 0x48, 0x5b, 0xcd, 0xfe, 0xb9, 0xc3, 0xc4, 0xcf, 0x10, 0xa6, 0xb5, 0x2a, 0x34,
	0x6d, 0x11, 0xc9, 0xb0, 0x7b, 0xf8, 0x2f, 0xdd, 0x75, 0xd7, 0x27, 0x4d, 0x14, 0xcc, 0xc7, 0x8b,
	0x70, 0xc5, 0x7c, 0xc8, 0xf0, 0x01, 0x15, 0xa1, 0x1c, 0x62, 0xf1, 0x1d, 0xc0, 0xf0, 0xc4, 0x18,
	0x4c, 0x0a, 0x6d, 0x6c, 0x14, 0xcc, 0x83, 0xc5, 0x4c, 0x38, 0xdd, 0x7b, 0x8d, 0x26, 0x1b, 0x8d,
	0xe6, 0xc1, 0x62, 0x2a, 0x9c, 0x8e, 0x6f, 0x20, 0x4c, 0xb7, 0xaf, 0x02, 0x8d, 0x6e, 0x49, 0x21,
	0xbb, 0x02, 0x68, 0x74, 0x55, 0xaa, 0x6e, 0x47, 0x98, 0x1d, 0xc2, 0x33, 0xef, 0x08, 0xcc, 0xe2,
	0x9f, 0x00, 0x26, 0xe9, 0x7a, 0x63, 0xd8, 0x35, 0x4c, 0xa4, 0xaa, 0x8e, 0xdd, 0x2e, 0x4e, 0xdd,
	0xd6, 0x1b, 0xc3, 0x53, 0x55, 0x99, 0x97, 0xda, 0x52, 0x27, 0x1c, 0x73, 0xb9, 0x81, 0xd9, 0xc9,
	0x62, 0x67, 0x30, 0xfe, 0xc4, 0xee, 0x30, 0xb9, 0x97, 0x6c, 0x09, 0xd3, 0x6f, 0x59, 0xb5, 0xe8,
	0x6a, 0x85, 0xab, 0xf3, 0xd3, 0xac, 0xa1, 0x96, 0xf0, 0xc4, 0xe3, 0xe8, 0x21, 0x78, 0x7a, 0x83,
	0x58, 0x53, 0xce, 0x8b, 0xae, 0x41, 0xaa, 0xf0, 0x23, 0x47, 0xe2, 0x99, 0xdc, 0x53, 0xa9, 0x8e,
	0xb9, 0xfe, 0xd3, 0xde, 0x97, 0x79, 0x69, 0x8b, 0x76, 0xcf, 0x95, 0xfe, 0x4a, 0xfe, 0xa0, 0x89,
	0x47, 0x13, 0x8f, 0x26, 0x3d, 0xba, 0xf7, 0x5b, 0xb8, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x0a, 0x1d, 0x41, 0xa8, 0x01, 0x00, 0x00,
}
