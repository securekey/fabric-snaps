// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/channelevents.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	peer/channelevents.proto

It has these top-level messages:
	RegisterChannel
	DeregisterChannel
	ChannelServiceRequest
	ChannelServiceResponse
	ChannelServiceResult
	ChannelResult
*/
package api

import (
	"context"
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"
	"google.golang.org/grpc"

	math "math"

	"github.com/hyperledger/fabric/protos/common"

	protos4 "github.com/hyperledger/fabric/protos/peer"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HeaderType int32

const (
	HeaderType_MESSAGE                 HeaderType = 0
	HeaderType_CONFIG                  HeaderType = 1
	HeaderType_CONFIG_UPDATE           HeaderType = 2
	HeaderType_ENDORSER_TRANSACTION    HeaderType = 3
	HeaderType_ORDERER_TRANSACTION     HeaderType = 4
	HeaderType_DELIVER_SEEK_INFO       HeaderType = 5
	HeaderType_CHAINCODE_PACKAGE       HeaderType = 6
	HeaderType_PEER_RESOURCE_UPDATE    HeaderType = 7
	HeaderType_CHANNEL_SERVICE_REQUEST HeaderType = 8
)

var HeaderType_name = map[int32]string{
	0: "MESSAGE",
	1: "CONFIG",
	2: "CONFIG_UPDATE",
	3: "ENDORSER_TRANSACTION",
	4: "ORDERER_TRANSACTION",
	5: "DELIVER_SEEK_INFO",
	6: "CHAINCODE_PACKAGE",
	7: "PEER_RESOURCE_UPDATE",
	8: "CHANNEL_SERVICE_REQUEST",
}
var HeaderType_value = map[string]int32{
	"MESSAGE":                 0,
	"CONFIG":                  1,
	"CONFIG_UPDATE":           2,
	"ENDORSER_TRANSACTION":    3,
	"ORDERER_TRANSACTION":     4,
	"DELIVER_SEEK_INFO":       5,
	"CHAINCODE_PACKAGE":       6,
	"PEER_RESOURCE_UPDATE":    7,
	"CHANNEL_SERVICE_REQUEST": 8,
}

func (x HeaderType) String() string {
	return proto.EnumName(HeaderType_name, int32(x))
}
func (HeaderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterChannel struct {
	ChannelIds []string            `protobuf:"bytes,1,rep,name=channel_ids,json=channelIds" json:"channel_ids,omitempty"`
	Events     []*protos4.Interest `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (m *RegisterChannel) Reset()                    { *m = RegisterChannel{} }
func (m *RegisterChannel) String() string            { return proto.CompactTextString(m) }
func (*RegisterChannel) ProtoMessage()               {}
func (*RegisterChannel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterChannel) GetChannelIds() []string {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

func (m *RegisterChannel) GetEvents() []*protos4.Interest {
	if m != nil {
		return m.Events
	}
	return nil
}

type DeregisterChannel struct {
	ChannelIds []string `protobuf:"bytes,1,rep,name=channel_ids,json=channelIds" json:"channel_ids,omitempty"`
}

func (m *DeregisterChannel) Reset()                    { *m = DeregisterChannel{} }
func (m *DeregisterChannel) String() string            { return proto.CompactTextString(m) }
func (*DeregisterChannel) ProtoMessage()               {}
func (*DeregisterChannel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeregisterChannel) GetChannelIds() []string {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

type ChannelServiceRequest struct {
	// Types that are valid to be assigned to Request:
	//	*ChannelServiceRequest_RegisterChannel
	//	*ChannelServiceRequest_DeregisterChannel
	Request isChannelServiceRequest_Request `protobuf_oneof:"request"`
}

func (m *ChannelServiceRequest) Reset()                    { *m = ChannelServiceRequest{} }
func (m *ChannelServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ChannelServiceRequest) ProtoMessage()               {}
func (*ChannelServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isChannelServiceRequest_Request interface {
	isChannelServiceRequest_Request()
}

type ChannelServiceRequest_RegisterChannel struct {
	RegisterChannel *RegisterChannel `protobuf:"bytes,1,opt,name=register_channel,json=registerChannel,oneof"`
}
type ChannelServiceRequest_DeregisterChannel struct {
	DeregisterChannel *DeregisterChannel `protobuf:"bytes,2,opt,name=deregister_channel,json=deregisterChannel,oneof"`
}

func (*ChannelServiceRequest_RegisterChannel) isChannelServiceRequest_Request()   {}
func (*ChannelServiceRequest_DeregisterChannel) isChannelServiceRequest_Request() {}

func (m *ChannelServiceRequest) GetRequest() isChannelServiceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChannelServiceRequest) GetRegisterChannel() *RegisterChannel {
	if x, ok := m.GetRequest().(*ChannelServiceRequest_RegisterChannel); ok {
		return x.RegisterChannel
	}
	return nil
}

func (m *ChannelServiceRequest) GetDeregisterChannel() *DeregisterChannel {
	if x, ok := m.GetRequest().(*ChannelServiceRequest_DeregisterChannel); ok {
		return x.DeregisterChannel
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChannelServiceRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChannelServiceRequest_OneofMarshaler, _ChannelServiceRequest_OneofUnmarshaler, _ChannelServiceRequest_OneofSizer, []interface{}{
		(*ChannelServiceRequest_RegisterChannel)(nil),
		(*ChannelServiceRequest_DeregisterChannel)(nil),
	}
}

func _ChannelServiceRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChannelServiceRequest)
	// request
	switch x := m.Request.(type) {
	case *ChannelServiceRequest_RegisterChannel:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterChannel); err != nil {
			return err
		}
	case *ChannelServiceRequest_DeregisterChannel:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeregisterChannel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChannelServiceRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _ChannelServiceRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChannelServiceRequest)
	switch tag {
	case 1: // request.register_channel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterChannel)
		err := b.DecodeMessage(msg)
		m.Request = &ChannelServiceRequest_RegisterChannel{msg}
		return true, err
	case 2: // request.deregister_channel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeregisterChannel)
		err := b.DecodeMessage(msg)
		m.Request = &ChannelServiceRequest_DeregisterChannel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChannelServiceRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChannelServiceRequest)
	// request
	switch x := m.Request.(type) {
	case *ChannelServiceRequest_RegisterChannel:
		s := proto.Size(x.RegisterChannel)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChannelServiceRequest_DeregisterChannel:
		s := proto.Size(x.DeregisterChannel)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ChannelServiceResponse struct {
	// Types that are valid to be assigned to Response:
	//	*ChannelServiceResponse_Result
	//	*ChannelServiceResponse_Event
	Response isChannelServiceResponse_Response `protobuf_oneof:"response"`
}

func (m *ChannelServiceResponse) Reset()                    { *m = ChannelServiceResponse{} }
func (m *ChannelServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ChannelServiceResponse) ProtoMessage()               {}
func (*ChannelServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isChannelServiceResponse_Response interface {
	isChannelServiceResponse_Response()
}

type ChannelServiceResponse_Result struct {
	Result *ChannelServiceResult `protobuf:"bytes,1,opt,name=result,oneof"`
}
type ChannelServiceResponse_Event struct {
	Event *protos4.Event `protobuf:"bytes,2,opt,name=event,oneof"`
}

func (*ChannelServiceResponse_Result) isChannelServiceResponse_Response() {}
func (*ChannelServiceResponse_Event) isChannelServiceResponse_Response()  {}

func (m *ChannelServiceResponse) GetResponse() isChannelServiceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ChannelServiceResponse) GetResult() *ChannelServiceResult {
	if x, ok := m.GetResponse().(*ChannelServiceResponse_Result); ok {
		return x.Result
	}
	return nil
}

func (m *ChannelServiceResponse) GetEvent() *protos4.Event {
	if x, ok := m.GetResponse().(*ChannelServiceResponse_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChannelServiceResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChannelServiceResponse_OneofMarshaler, _ChannelServiceResponse_OneofUnmarshaler, _ChannelServiceResponse_OneofSizer, []interface{}{
		(*ChannelServiceResponse_Result)(nil),
		(*ChannelServiceResponse_Event)(nil),
	}
}

func _ChannelServiceResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChannelServiceResponse)
	// response
	switch x := m.Response.(type) {
	case *ChannelServiceResponse_Result:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case *ChannelServiceResponse_Event:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChannelServiceResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _ChannelServiceResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChannelServiceResponse)
	switch tag {
	case 1: // response.result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChannelServiceResult)
		err := b.DecodeMessage(msg)
		m.Response = &ChannelServiceResponse_Result{msg}
		return true, err
	case 2: // response.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(protos4.Event)
		err := b.DecodeMessage(msg)
		m.Response = &ChannelServiceResponse_Event{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChannelServiceResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChannelServiceResponse)
	// response
	switch x := m.Response.(type) {
	case *ChannelServiceResponse_Result:
		s := proto.Size(x.Result)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChannelServiceResponse_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ChannelServiceResult returns information about registration/deregistration
// actions on the server to the client. The possible actions are currently
// RegisterChannel and DeregisterChannel. Success indicates whether the action
// succeeded for all channels.
type ChannelServiceResult struct {
	Action         string           `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Success        bool             `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	ChannelResults []*ChannelResult `protobuf:"bytes,3,rep,name=channel_results,json=channelResults" json:"channel_results,omitempty"`
}

func (m *ChannelServiceResult) Reset()                    { *m = ChannelServiceResult{} }
func (m *ChannelServiceResult) String() string            { return proto.CompactTextString(m) }
func (*ChannelServiceResult) ProtoMessage()               {}
func (*ChannelServiceResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChannelServiceResult) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ChannelServiceResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ChannelServiceResult) GetChannelResults() []*ChannelResult {
	if m != nil {
		return m.ChannelResults
	}
	return nil
}

// ChannelResult holds information about each action that was requested by
// the client. registered_events holds the events the client expressed interest
// in and has access to based on any ACL that is present. An empty error message
//  means that the action was successful. Otherwise, it will contain context
// about the reason for failure.
type ChannelResult struct {
	ChannelId        string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	RegisteredEvents []string `protobuf:"bytes,2,rep,name=registered_events,json=registeredEvents" json:"registered_events,omitempty"`
	ErrorMsg         string   `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *ChannelResult) Reset()                    { *m = ChannelResult{} }
func (m *ChannelResult) String() string            { return proto.CompactTextString(m) }
func (*ChannelResult) ProtoMessage()               {}
func (*ChannelResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChannelResult) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelResult) GetRegisteredEvents() []string {
	if m != nil {
		return m.RegisteredEvents
	}
	return nil
}

func (m *ChannelResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterChannel)(nil), "protos.RegisterChannel")
	proto.RegisterType((*DeregisterChannel)(nil), "protos.DeregisterChannel")
	proto.RegisterType((*ChannelServiceRequest)(nil), "protos.ChannelServiceRequest")
	proto.RegisterType((*ChannelServiceResponse)(nil), "protos.ChannelServiceResponse")
	proto.RegisterType((*ChannelServiceResult)(nil), "protos.ChannelServiceResult")
	proto.RegisterType((*ChannelResult)(nil), "protos.ChannelResult")
	proto.RegisterEnum("protos.HeaderType", HeaderType_name, HeaderType_value)
}

func init() { proto.RegisterFile("peer/channelevents.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xe3, 0xa6, 0xcd, 0xe5, 0x44, 0xa5, 0xce, 0xf4, 0x66, 0x5a, 0x2e, 0x55, 0x24, 0xa4,
	0x08, 0xa4, 0x1a, 0x15, 0xc4, 0x06, 0x51, 0xc9, 0xb5, 0xa7, 0xb5, 0x69, 0x6b, 0x97, 0x71, 0xda,
	0x05, 0x42, 0xb2, 0x52, 0xfb, 0x90, 0x44, 0x4a, 0x6d, 0x33, 0xe3, 0x44, 0x74, 0xcd, 0x86, 0x07,
	0xe2, 0x41, 0x78, 0x24, 0x14, 0x8f, 0x4d, 0x4b, 0x02, 0x0b, 0x56, 0xce, 0x9c, 0xcb, 0xf7, 0xff,
	0x9e, 0x73, 0x62, 0xd0, 0x52, 0x44, 0xae, 0x87, 0xc3, 0x7e, 0x1c, 0xe3, 0x18, 0xa7, 0x18, 0x67,
	0x62, 0x3f, 0xe5, 0x49, 0x96, 0x90, 0x5a, 0xfe, 0x10, 0x3b, 0xeb, 0x61, 0x72, 0x73, 0x93, 0xc4,
	0xba, 0x7c, 0xc8, 0xe4, 0x4e, 0x3b, 0x6f, 0xbb, 0x5f, 0xdf, 0xf9, 0x04, 0x6b, 0x0c, 0x07, 0x23,
	0x91, 0x21, 0x37, 0x25, 0x8e, 0x3c, 0x85, 0x56, 0x41, 0x0e, 0x46, 0x91, 0xd0, 0x94, 0xbd, 0x6a,
	0xb7, 0xc9, 0xa0, 0x08, 0x39, 0x91, 0x20, 0x5d, 0xa8, 0x49, 0x86, 0xb6, 0xb4, 0x57, 0xed, 0xb6,
	0x0e, 0x54, 0xc9, 0x12, 0xfb, 0x4e, 0x9c, 0x21, 0x47, 0x91, 0xb1, 0x22, 0xdf, 0x79, 0x0d, 0x6d,
	0x0b, 0xf9, 0x7f, 0xf2, 0x3b, 0x3f, 0x14, 0xd8, 0x2c, 0x8a, 0x7d, 0xe4, 0xd3, 0x51, 0x88, 0x0c,
	0xbf, 0x4c, 0x50, 0x64, 0xc4, 0x02, 0xb5, 0xa4, 0x05, 0x45, 0x83, 0xa6, 0xec, 0x29, 0xdd, 0xd6,
	0xc1, 0x76, 0xe9, 0x61, 0xee, 0x6d, 0xec, 0x0a, 0x5b, 0x9b, 0x37, 0xf0, 0x1e, 0x48, 0x84, 0x0b,
	0x9c, 0xa5, 0x9c, 0xf3, 0xb0, 0xe4, 0x2c, 0xf8, 0xb6, 0x2b, 0xac, 0x1d, 0xcd, 0x07, 0x8f, 0x9a,
	0x50, 0xe7, 0xd2, 0x5c, 0xe7, 0x9b, 0x02, 0x5b, 0xf3, 0xb6, 0x45, 0x9a, 0xc4, 0x02, 0xc9, 0x1b,
	0xa8, 0x71, 0x14, 0x93, 0x71, 0x56, 0xb8, 0x7d, 0x54, 0xaa, 0x2c, 0xd4, 0x4f, 0xc6, 0x99, 0x5d,
	0x61, 0x45, 0x35, 0x79, 0x06, 0x2b, 0xf9, 0x4d, 0x16, 0xe6, 0x56, 0xcb, 0x36, 0x3a, 0x0b, 0xda,
	0x15, 0x26, 0xb3, 0x47, 0x00, 0x0d, 0x5e, 0x48, 0x75, 0xbe, 0x2b, 0xb0, 0xf1, 0x37, 0x2a, 0xd9,
	0x82, 0x5a, 0x3f, 0xcc, 0x46, 0x49, 0x9c, 0x7b, 0x68, 0xb2, 0xe2, 0x44, 0x34, 0xa8, 0x8b, 0x49,
	0x18, 0xa2, 0x10, 0xb9, 0x4a, 0x83, 0x95, 0x47, 0x72, 0x08, 0x6b, 0xe5, 0xa0, 0xa4, 0x1f, 0xa1,
	0x55, 0xf3, 0x81, 0x6f, 0xce, 0xd9, 0x97, 0x0a, 0xec, 0x41, 0x78, 0xff, 0x28, 0x3a, 0x5f, 0x61,
	0xf5, 0x8f, 0x02, 0xf2, 0x18, 0xe0, 0x6e, 0xf2, 0x85, 0x8d, 0xe6, 0xef, 0xc1, 0x93, 0x17, 0xd0,
	0x2e, 0xaf, 0x17, 0xa3, 0xe0, 0xde, 0x8a, 0x35, 0x99, 0x7a, 0x97, 0xc8, 0xdf, 0x5d, 0x90, 0x5d,
	0x68, 0x22, 0xe7, 0x09, 0x0f, 0x6e, 0xc4, 0x40, 0xab, 0xe6, 0xa8, 0x46, 0x1e, 0x38, 0x17, 0x83,
	0xe7, 0x3f, 0x15, 0x00, 0x1b, 0xfb, 0x11, 0xf2, 0xde, 0x6d, 0x8a, 0xa4, 0x05, 0xf5, 0x73, 0xea,
	0xfb, 0xc6, 0x09, 0x55, 0x2b, 0x04, 0xa0, 0x66, 0x7a, 0xee, 0xb1, 0x73, 0xa2, 0x2a, 0xa4, 0x0d,
	0xab, 0xf2, 0x77, 0x70, 0x79, 0x61, 0x19, 0x3d, 0xaa, 0x2e, 0x11, 0x0d, 0x36, 0xa8, 0x6b, 0x79,
	0xcc, 0xa7, 0x2c, 0xe8, 0x31, 0xc3, 0xf5, 0x0d, 0xb3, 0xe7, 0x78, 0xae, 0x5a, 0x25, 0xdb, 0xb0,
	0xee, 0x31, 0x8b, 0xb2, 0xb9, 0xc4, 0x32, 0xd9, 0x84, 0xb6, 0x45, 0xcf, 0x9c, 0x2b, 0xca, 0x02,
	0x9f, 0xd2, 0xd3, 0xc0, 0x71, 0x8f, 0x3d, 0x75, 0x65, 0x16, 0x36, 0x6d, 0xc3, 0x71, 0x4d, 0xcf,
	0xa2, 0xc1, 0x85, 0x61, 0x9e, 0xce, 0xf4, 0x6b, 0x33, 0x81, 0x0b, 0x4a, 0x59, 0xc0, 0xa8, 0xef,
	0x5d, 0x32, 0x93, 0x96, 0xd2, 0x75, 0xb2, 0x0b, 0xdb, 0xa6, 0x6d, 0xb8, 0x2e, 0x3d, 0x0b, 0x7c,
	0xca, 0xae, 0x1c, 0x93, 0x06, 0x8c, 0x7e, 0xb8, 0xa4, 0x7e, 0x4f, 0x6d, 0x1c, 0x38, 0x50, 0x2f,
	0xf7, 0xf7, 0x10, 0x96, 0xcd, 0x61, 0x3f, 0x23, 0xea, 0x7e, 0xf1, 0xef, 0xa6, 0xf1, 0x14, 0xc7,
	0x49, 0x8a, 0x3b, 0x4f, 0xfe, 0xb9, 0x57, 0x72, 0x39, 0x2a, 0x5d, 0xe5, 0xa5, 0x72, 0xf4, 0xee,
	0xe3, 0xdb, 0xc1, 0x28, 0x1b, 0x4e, 0xae, 0x67, 0xfd, 0xfa, 0xf0, 0x36, 0x45, 0x3e, 0xc6, 0x68,
	0x80, 0x5c, 0xff, 0xdc, 0xbf, 0xe6, 0xa3, 0x50, 0x0f, 0x13, 0x8e, 0xba, 0x08, 0x43, 0x3d, 0x44,
	0x11, 0xf7, 0x53, 0x5d, 0x20, 0x9f, 0x22, 0xd7, 0x25, 0xfb, 0x5a, 0x7e, 0x62, 0x5e, 0xfd, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x34, 0x53, 0x23, 0xe2, 0x85, 0x04, 0x00, 0x00,
}

// Server API for Channel service

type ChannelServer interface {
	Chat(Channel_ChatServer) error
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChannelServer).Chat(&channelChatServer{stream})
}

type Channel_ChatServer interface {
	Send(*ChannelServiceResponse) error
	Recv() (*common.Envelope, error)
	grpc.ServerStream
}

type channelChatServer struct {
	grpc.ServerStream
}

func (x *channelChatServer) Send(m *ChannelServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *channelChatServer) Recv() (*common.Envelope, error) {
	m := new(common.Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Channel_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/events.proto",
}

// Client API for Channel service

type ChannelClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Channel_ChatClient, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Channel_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Channel_serviceDesc.Streams[0], c.cc, "/protos.Channel/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelChatClient{stream}
	return x, nil
}

type Channel_ChatClient interface {
	Send(*common.Envelope) error
	Recv() (*ChannelServiceResponse, error)
	grpc.ClientStream
}

type channelChatClient struct {
	grpc.ClientStream
}

func (x *channelChatClient) Send(m *common.Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *channelChatClient) Recv() (*ChannelServiceResponse, error) {
	m := new(ChannelServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
