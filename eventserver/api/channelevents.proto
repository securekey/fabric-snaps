/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "common/common.proto";
import "peer/events.proto";

option go_package = "github.com/securekey/fabric-snaps/eventserver/api";

package protos;

enum HeaderType {
    MESSAGE = 0;                   // Used for messages which are signed but opaque
    CONFIG = 1;                    // Used for messages which express the channel config
    CONFIG_UPDATE = 2;             // Used for transactions which update the channel config
    ENDORSER_TRANSACTION = 3;      // Used by the SDK to submit endorser based transactions
    ORDERER_TRANSACTION = 4;       // Used internally by the orderer for management
    DELIVER_SEEK_INFO = 5;         // Used as the type for Envelope messages submitted to instruct the Deliver API to seek
    CHAINCODE_PACKAGE = 6;         // Used for packaging chaincode artifacts for install
    PEER_RESOURCE_UPDATE = 7;      // Used for encoding updates to the peer resource configuration
    CHANNEL_SERVICE_REQUEST = 8;   // Used for packaging registration/deregistration requests for the channel service
}

message RegisterChannel{
    repeated string channel_ids = 1;
    repeated Interest events = 2;
}

message DeregisterChannel{
    repeated string channel_ids = 1;
}

message ChannelServiceRequest {
    oneof request {
        RegisterChannel register_channel = 1;
        DeregisterChannel deregister_channel = 2;
    }
}

message ChannelServiceResponse {
    oneof response {
        ChannelServiceResult result = 1;
        Event event = 2;
    }
}
// ChannelServiceResult returns information about registration/deregistration
// actions on the server to the client. The possible actions are currently
// RegisterChannel and DeregisterChannel. Success indicates whether the action
// succeeded for all channels.
message ChannelServiceResult {
    string action = 1;
    bool success = 2;
    repeated ChannelResult channel_results = 3;
}

// ChannelResult holds information about each action that was requested by
// the client. registered_events holds the events the client expressed interest
// in and has access to based on any ACL that is present. An empty error message
//  means that the action was successful. Otherwise, it will contain context
// about the reason for failure.
message ChannelResult {
    string channel_id = 1;
    repeated string registered_events = 2;
    string error_msg = 3;
}

// Channel service for events
// client sends an envelope which contains the ChannelServiceRequest
// server sends back a ChannelServiceResponse which can be either a
// registration/deregistration message or an event
service Channel {
    rpc Chat(stream common.Envelope) returns (stream ChannelServiceResponse) {}
}
